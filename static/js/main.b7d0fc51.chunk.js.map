{"version":3,"sources":["components/Statistics/Statistics.js","components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Notification.js","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","FeedbackOptions","onLeaveFeedback","options","map","name","type","onClick","Notification","message","App","state","handleIncrement","e","target","setState","prevState","this","totalPositive","Math","round","countTotalFeedback","Object","keys","countPositiveFeedbackPercentage","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAuBeA,EApBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,gCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,2CAAcC,EAAd,WCMSC,EAbC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,gCACE,6BAAKD,IACJC,MCYQC,EAhBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,gBAAiBC,EAAc,EAAdA,QAC1C,OACE,8BACGA,EAAQC,KAAI,SAAAC,GAAI,OACf,wBAAQC,KAAK,SAAoBD,KAAMA,EAAME,QAASL,EAAtD,SACGG,GADwBA,SCJpB,SAASG,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,6BAAKA,I,IC6DCC,E,4MA1DbC,MAAQ,CACNlB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPiB,gBAAkB,SAAAC,GAChB,IAAQR,EAASQ,EAAEC,OAAXT,KACR,EAAKU,UAAS,SAAAC,GACZ,OAAO,eACJX,EAAOW,EAAUX,GAAQ,O,wDAKhC,WAEE,OADYY,KAAKN,MAAMlB,KAAOwB,KAAKN,MAAMjB,QAAUuB,KAAKN,MAAMhB,M,6CAIhE,WACE,IAAIuB,EACDD,KAAKN,MAAMlB,MACTwB,KAAKN,MAAMlB,KAAOwB,KAAKN,MAAMjB,QAAUuB,KAAKN,MAAMhB,KACrD,IAEF,OADAuB,EAAgBC,KAAKC,MAAMF,K,oBAI7B,WACE,IAAItB,EAAQqB,KAAKI,qBACjB,EAA+BJ,KAAKN,MAA5BlB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACvB,OACE,gCACE,cAAC,EAAD,CAASI,MAAM,wBAAf,SACE,cAAC,EAAD,CACEI,QAASmB,OAAOC,KAAKN,KAAKN,OAC1BT,gBAAiBe,KAAKL,oBAG1B,cAAC,EAAD,CAASb,MAAM,aAAf,SACGH,EAAQ,EACP,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBoB,KAAKO,oCAG3B,cAAChB,EAAD,CAAcC,QAAQ,+B,GAnDhBgB,aCFlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b7d0fc51.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <div>\r\n      <p>Good: {good}</p>\r\n      <p>Neutral: {neutral}</p>\r\n      <p>Bad: {bad}</p>\r\n      <p>Total: {total}</p>\r\n      <p>Positive: {positivePercentage}%</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <div>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ onLeaveFeedback, options }) => {\r\n  return (\r\n    <div>\r\n      {options.map(name => (\r\n        <button type=\"button\" key={name} name={name} onClick={onLeaveFeedback}>\r\n          {name}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Notification({ message }) {\r\n  return <h2>{message}</h2>;\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n","import React, { Component } from 'react';\nimport Statistics from './components/Statistics';\nimport Section from './components/Section';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Notification from './components/Statistics/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleIncrement = e => {\n    const { name } = e.target;\n    this.setState(prevState => {\n      return {\n        [name]: prevState[name] + 1,\n      };\n    });\n  };\n\n  countTotalFeedback() {\n    let total = this.state.good + this.state.neutral + this.state.bad;\n    return total;\n  }\n\n  countPositiveFeedbackPercentage() {\n    let totalPositive =\n      (this.state.good /\n        (this.state.good + this.state.neutral + this.state.bad)) *\n      100;\n    totalPositive = Math.round(totalPositive);\n    return totalPositive;\n  }\n\n  render() {\n    let total = this.countTotalFeedback();\n    const { good, neutral, bad } = this.state;\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.handleIncrement}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {total > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}